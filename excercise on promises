1) Print the number after the seconds using promise(also number is value of second), i.e arr = [2,4,1,3]  Print 2 after 2 sec, than print 4 after next 4 sec,...
async function task(delay) {
    return new Promise((res, rej) => {
        setTimeout(() => {
        console.log('%d', delay)
        res();
        },delay*1000)
    })
}

var arr = [2,4,1,3];

const each = async (arr) => {
    for(item of arr) {
        await task(item);
    }
}


2) From the array of 10 promise, if any 2 promise are Rejected then output should be combination of the error message of both the promise after all the promise are resolved(Prmoise should be executed one after one).
Promise.allSettled([
    Promise.resolve(33),
    Promise.reject(22),
    Promise.resolve(44),
    new Promise(resolve => setTimeout(() => resolve(66), 0)),
    99,
    Promise.reject('an error')
  ])
  .then(values => console.log(values))
  .catch(err => console.log("err"));


3) Which async/sync in foreach and for loop(try to break it).
not possible

4) Create one main function with three parameter(sting, string, calculation function), and this main function should return promise
        calculation function -> match the both string with case-insensitive.
        Prmoise should use this calculation function and return the answer of calculation function .
const main = (stingOne, stringTwo, calculationFun) => {
    return new Promise((resolve, reject) => {
        let result = calculationFun(stingOne, stringTwo);
        console.log(result);
        if(result = true) {
            resolve(result)
        }
        else {
            reject(result);
        }
    })
}

const calculationFun = (stingOne, stringTwo) => {
    let strOne = stingOne.toUpperCase();
    let strTwo = stringTwo.toUpperCase();
    let result = null;
    if(strOne.length != strTwo.length) { 
        result = false;
        return result;
    }
    else {
        for(let i =0; i <= strOne.length; i++) {
            if(strOne[i] != strTwo[i]){
            result = false;
            return result;
            }
        }
        result = true;
    }
    return result;
}

main('ravirajsinh', 'ravirajsinh',calculationFun) 


5) find the difference of Bulebird promise and javascript promise.
the BlueBird promise have better performacnce than native js promise and are more memory efficient. 


6) Bluebird (want to do 100 req , perform the requests in the size of 10,10,10 asyncronously and in the batch of 10 reqest all the reqeust should be performed in syncronously mode(like complete 1, after 2, after 3,....,end 10)). solution should be scallable means for any number of request it should work."
const bluebird = require("bluebird");

let req = [];

for(i =1; i<=50;i++) {
    req.push(i);
}


bluebird.map(req, item => myFun(item), {concurrency : 10})

const myFun = (item) => {
    return new bluebird((res,rej) => {
        setTimeout(() => {
            console.log(item);
            res();
        },1000)
    })
}
